@page "/games/{GameId}/locations/{LocationId}"
@using Kadense.RPG.DataAccess;
@using System.Text.Encodings.Web
@using website.Components.Layout
@using Microsoft.AspNetCore


@if(GameDetails != null && LocationDetails != null)
{
    <a href="/games/@GameId">&lt;&lt; Back to @GameDetails!.Name</a>

    <LocationPageTabs GameDetails="@GameDetails" LocationDetails="@LocationDetails" Characters="@Characters" Items="@Items" /> 
}


@code
{
    
    [Parameter]
    public string? GameId { get; set; }

    [Parameter]
    public string? LocationId { get; set; }

    public Game? GameDetails { get; set; }

    public GameLocation? LocationDetails { get; set; }

    public Dictionary<string, GameIndexItem>? Characters { get; set; }

    public Dictionary<string, GameIndexItem>? Items { get;set; }

    protected override async Task OnInitializedAsync()
    {
        var client = new DataConnectionClient();
        GameDetails = await client.ReadGameAsync(GameId!);
        LocationDetails = await client.ReadGameLocationAsync(GameId!, LocationId!);
        var characterIds = GameDetails!.GetCharactersForLocation(LocationId!);
        var itemIds = GameDetails!.GetItemsForLocation(LocationId!);

        var itemIndex = await client.ReadGameItemIndexAsync(GameId!);
        foreach(var key in itemIndex.Keys)
        {
            if(!itemIds.Contains(key))
            {
                itemIndex.Remove(key);
            }
        }

        Items = itemIndex;

        var characterIndex = await client.ReadGameCharacterIndexAsync(GameId!);
        
        foreach(var key in characterIndex.Keys)
        {
            if(!characterIds.Contains(key))
            {
                characterIndex.Remove(key);
            }
        }
        Characters = characterIndex;
        StateHasChanged();
    }
}
