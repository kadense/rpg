@page "/games/{GameId}/items/{ItemId}"
@using Kadense.RPG.DataAccess;
@using System.Text.Encodings.Web
@using website.Components.Layout
@using Microsoft.AspNetCore

@if(GameDetails != null && ItemDetails != null)
{
    <a href="/games/@GameId">&lt;&lt; Back to @GameDetails!.Name</a>
    <ItemPageTabs GameDetails="@GameDetails" ItemDetails="@ItemDetails" Characters="@Characters" Locations="@Locations" />
}

@code
{
    [Parameter]
    public string? GameId { get; set; }

    [Parameter]
    public string? ItemId { get; set; }

    public Game? GameDetails { get; set; }

    public GameItem? ItemDetails { get; set; }

    public Dictionary<string, GameIndexItem>? Characters { get; set; }
    public Dictionary<string, GameIndexItem>? Locations { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var client = new DataConnectionClient();
        GameDetails = await client.ReadGameAsync(GameId!);
        ItemDetails = await client.ReadGameItemAsync(GameId!, ItemId!);
        var characterIds = GameDetails!.GetCharactersForItem(ItemId!);
        var locationIds = GameDetails!.GetLocationsForItem(ItemId!);
        var characterIndex = await client.ReadGameCharacterIndexAsync(GameId!);
        
        foreach(var key in characterIndex.Keys)
        {
            if(!characterIds.Contains(key))
            {
                characterIndex.Remove(key);
            }
        }
        Characters = characterIndex;


        var locationsIndex = await client.ReadGameLocationIndexAsync(GameId!);
        foreach(var key in locationsIndex.Keys)
        {
            if(!locationIds.Contains(key))
            {
                locationsIndex.Remove(key);
            }
        }

        Locations = locationsIndex;
        StateHasChanged();
    }
}