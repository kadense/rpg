@page "/games/{GameId}/characters/{CharacterId}"
@using website.Components.Layout
@using Kadense.RPG.DataAccess;

@if(GameDetails != null)
{
    <a href="/games/@GameId">&lt;&lt; Back to @GameDetails!.Name</a>
    <CharacterPageTabs GameDetails="@GameDetails" CharacterDetails="@CharacterDetails" Locations="@Locations" Items="@Items"  />
}

@code
{
    [Parameter]
    public string? GameId { get; set; }

    [Parameter]
    public string? CharacterId { get; set; }

    public Game? GameDetails { get; set; }
    public GameCharacter? CharacterDetails { get; set; }
    public Dictionary<string, GameIndexItem>? Locations { get; set; }
    public Dictionary<string, GameIndexItem>? Items { get;set; }
    
    protected override async Task OnInitializedAsync()
    {
        var client = new DataConnectionClient();
        GameDetails = await client.ReadGameAsync(GameId!);
        CharacterDetails = await client.ReadGameCharacterAsync(GameId!, CharacterId!);
        var locationIds = GameDetails!.GetLocationsForCharacter(CharacterId!);
        
        var locationsIndex = await client.ReadGameLocationIndexAsync(GameId!);
        foreach(var key in locationsIndex.Keys)
        {
            if(!locationIds.Contains(key))
            {
                locationsIndex.Remove(key);
            }
        }

        Locations = locationsIndex;

        var itemIds = GameDetails.GetItemsForCharacter(CharacterId!);
        
        var itemIndex = await client.ReadGameItemIndexAsync(GameId!);
        foreach(var key in itemIndex.Keys)
        {
            if(!itemIds.Contains(key))
            {
                itemIndex.Remove(key);
            }
        }

        Items = itemIndex;
        StateHasChanged();
    }
}
