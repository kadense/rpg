@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer
@inherits OwningComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

@if(GameDetails != null)
{
    <h1>@GameDetails.Name</h1>

    <FluentTabs Id="game-details-tab">
        <CascadingValue Value="this" Name="GameTabs">
            @if(GameDetails.Description != null || EditMode)
            {
                <FluentTab id="game-details" Label="Details">
                    <Content>
                        <div class="game-details">
                            <SideImage ImagePaths=@GameDetails.ImagePath Name=@GameDetails.Name />

                            <StandardContent Description=@GameDetails.Description />   
                        </div>
                    </Content>
                </FluentTab>
            }
            
            <FluentTab id="game-locations" Label="Locations" DeferredLoading="true">
                <LocationCards GameId=@GameDetails!.Id />
            </FluentTab>

            <FluentTab id="game-characters" Label="Characters" DeferredLoading="true">
                <Content>
                    <CharacterCards GameId=@GameDetails!.Id />
                </Content>
            </FluentTab>

            <FluentTab id="game-items" Label="Items" DeferredLoading="true">
                <Content>
                    <ItemCards GameId=@GameDetails!.Id />
                </Content>
            </FluentTab>
        </CascadingValue>
    </FluentTabs>
}

@code {
    [Parameter]
    public Game? GameDetails { get; set; }
    
    private UserModel? userDetails;

    public bool EditMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userService = ScopedServices.GetRequiredService<UserService>();
        userDetails = await userService.GetUserModelAsync(AuthenticationStateProvider);
    }        
}